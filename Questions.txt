КВ_1. Прокомментируйте осн. хар. С++:

 императивный(общается с CPU с помошью приказов)
 выс/ср. уровень 
 компилируемый
 условно переносимый на уровне исходного кода
 статистическая типизация
 мултипарадигменный:
	структурный(if, циклы)
	процедурный(разбиение на функции)
	обобщённый
	ООП


КВ_2. Перечислите фундаментальные типы данных и укажите их особенности:
  
 1) bool = false или true = 0 или 1 (1 байт)
 2)сhar/wchar (1/2 байта)
 3)int/short/long/long long (4/2/2/8 байт)
 принимают числа от -s до s, где s = 2^8 * 2^(4/2/4/8) соответственно
 4)float/double (4/8 байт)
 5)void - отсутвие типа данных

 1)-4) = Integer
 1)-5) = Arithmetic


КВ_3. Когда возникает проблема переносимости и как её предотвратить?

 Проблема переносимости возникает во многих случаях, в основном это из-за неспособности разных компиляторов или платформ воспринимать код, написанный 
 на другом компиляторе или платформе. Например, в msvc sizeof(wchar_t) равен 2 байтам. При установке linux он может составлять 4 байта. И тогда код 
 не будет работать при переносе. Или, например, расширения стандартных библиотек и нестандартные библиотеки (скачанные). В разных компиляторах они могут 
 работать по-разному: компилятор MS предоставляет несколько версий "safe" (например, strcpy_s) стандартных подпрограмм в стиле C. Который, конечно, 
 не будет доступен на других платформах.

КВ_4. Что такое определение, объявление, инициализация и присваивание?

 Определение - описание работы объекта(например, написать функцию, которая присваивает x^2 для входного x).
 Объявление - включает в себя указание идентификатора, типа, а также других аспектов элементов языка, например, переменных и функций.
 Инициализация - это объявление переменной вместе с присвоением ей значения.
 Присваивание - когда переменной присваивается значение после её объявления (не в момент объявления).

КВ_5.Почему выравнивание данных в памяти увеличивает производительность?
 Выравнивание данных в оперативной памяти компьютеров — способ размещения данных в памяти особым образом для ускорения доступа.
 Процессор считывает данные из памяти блоками размером отнюдь не в одни байт. Считывание данных производится блоками (по 2, 4, 8, 16, 32, 64).
 Поэтому если правильно разбивать память по этим блокам, то процессору юудет проще обрабатывать информацию и к тому же мы избежим нехороших ошибок))